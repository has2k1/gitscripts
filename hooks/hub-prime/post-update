#!/bin/bash

# Parameter $1 = refname

# Configuration
stageBranch="__stage__"
stageDir="$HOME/__stage__/newton"
primeDir="$HOME/newton"
hubRepoName="hub"

# Staging setup/unset scripts
prime_set_staging="$primeDir/prime_set_staging"
prime_unset_staging="$primeDir/prime_set_staging -r"
stage_set_staging="$stageDir/stage_set_staging"

# Branch
pushedRef=$1
pushedBranch=${pushedRef#refs/heads/}

echo
echo "**** Pulling changes into Prime [Hub's post-update hook]"
echo

#unset local environment
unset $(git rev-parse --local-env-vars)

# If pushed to the staging branch
if [ "$1" = "refs/heads/${stageBranch}" ]; then
   # If the stageBranch was not deleted by the push
   git show-ref --quiet --verify "refs/heads/${stageBranch}" && {
      # Create directory if it doesn't exist
      if [ ! -d "$stageDir" ]; then
         mkdir -p $stageDir
         echo "Stage directory: \"${stageDir}\" created"
      fi

      # Note the current branch
      # Checkout into the staging directory
      # The checkout switches branches, we don't want that
      currentRef=$(git symbolic-ref -q HEAD)
      echo $(git "--work-tree=$stageDir" checkout -f $stageBranch)
      $(git symbolic-ref -q HEAD $currentRef)
      $stage_set_staging
      $prime_set_staging
      exit 0
   }
   # If the stageBranch was deleted by the push
   git show-ref --quiet --verify "refs/heads/${stageBranch}" || {
      $prime_unset_staging
      exit 0
   }

else
   # Pushed to a non staging branch

   # Change to prime Directory
   cd "$primeDir" || exit

   # Checkedout branch
   currentRef=$(git symbolic-ref HEAD)

   # If branch exists in the prime repo
   git show-ref --quiet --verify "refs/heads/${pushedBranch}" && {
      # Get status of the repository in a short, script-safe format
      primeStatus=$(git status --porcelain)

      # If pushed to the current checkouted brand and
      # the repo is dirty, stash the changes
      if [ "$currentRef" = "refs/heads/${pushedBranch}" ]; then
         if [ -n "$primeStatus" ]; then
            HEADhash=$(git rev-parse HEAD)
            $(git stash save -q "${HEADhash:0:7} - Stashed by post-update hook")
            echo -e "Prime was \033[1;31mdirty\033[0m and has been stashed"
         fi
      fi

      # Fetch
      $(git fetch "$hubRepoName")

      # Should only merge by fast-forwarding
      if command -v git-merge-ff &> /dev/null; then
         echo $(git merge-ff "$pushedBranch" "$hubRepoName/$pushedBranch")
         $prime_unset_staging
         echo -e "\033[1;37mPrime is ready.\033[0m"
      else
         echo -e "\033[1;31mPrime repo merge failed\033[0m."
         echo "Install the git-merge-ff script in a directory "
         echo "within the PATH environment."
      fi
   }

   # Pushed branch does not exist in the prime repo
   git show-ref --quiet --verify "refs/heads/${pushedBranch}" || {
      echo -e "Branch ${pushedBranch} \033[1;31mdoes not exist\033[0m in the Prime repo."
      echo "Did not merge into prime"
   }

   echo "**************** End post-update hook ******************"

fi
