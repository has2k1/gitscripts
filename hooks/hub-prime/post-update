#!/bin/bash

# Parameter $1 = refname

# Configuration
stagingBranch="__staging__"
stagingDir="$HOME/__staging__/newton"
primeDir="$HOME/newton"
hubRepoName="hub"


pushedRef=$1
pushedBranch=${pushedRef#refs/heads/}

echo
echo "**** Pulling changes into Prime [Hub's post-update hook]"
echo

#unset local environment
unset $(git rev-parse --local-env-vars)

# If pushed to the staging branch
if [ "$1" = "refs/heads/${stagingBranch}" ]; then
   # Create directory if it doesn't exist
   if [ ! -d "$stagingDir" ]; then
      mkdir -p $stagingDir
      echo "Staging directory: \"${stagingDir}\" created"
   fi

   # Note the current branch
   # Checkout into the staging directory
   # The checkout switches branches, we don't want that
   currentRef=$(git symbolic-ref -q HEAD)
   echo $(git "--work-tree=$stagingDir" checkout -f $stagingBranch)
   $(git symbolic-ref -q HEAD $currentRef)
   exit 0

else
   # Pushed to a non staging branch

   # Change to prime Directory
   cd "$primeDir" || exit

   # Checkedout branch
   currentRef=$(git symbolic-ref HEAD)

   # If branch exists in the prime repo
   git show-ref --quiet --verify "refs/heads/${pushedBranch}" && {
      # Get status of the repository in a short, script-safe format
      primeStatus=$(git status --porcelain)

      # If pushed to the current checkouted brand and
      # the repo is dirty, stash the changes
      if [ "$currentRef" = "refs/heads/${pushedBranch}" ]; then
         if [ -n "$primeStatus" ]; then
            HEADhash=$(git rev-parse HEAD)
            $(git stash save -q "${HEADhash:0:7} - Stashed by post-update hook")
            echo -e "Prime was \033[1;31mdirty\033[0m and has been stashed"
         fi
      fi

      # Fetch
      $(git fetch "$hubRepoName" "${pushedBranch}")

      # Should only merge by fast-forwarding
      if command -v git-merge-ff &> /dev/null; then
         echo $(git merge-ff "$pushedBranch" "$hubRepoName/$pushedBranch")
      else
         echo -e "\033[1;31mPrime repo merge failed\033[0m."
         echo "Install the git-merge-ff script in a directory "
         echo "within the PATH environment."
      fi
   }

   # Pushed branch does not exist in the prime repo
   git show-ref --quiet --verify "refs/heads/${pushedBranch}" || {
      echo -e "Branch ${pushedBranch} \033[1;31mdoes not exist\033[0m in the Prime repo."
      echo "Did not merge into prime"
   }

   echo "**************** End post-update hook ******************"

fi
